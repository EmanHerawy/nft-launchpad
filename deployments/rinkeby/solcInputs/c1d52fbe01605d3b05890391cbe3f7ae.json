{
  "language": "Solidity",
  "sources": {
    "contracts/AnyNFTPausableWithEth.sol": {
      "content": "pragma solidity 0.8.7;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport './extensions/RandomlyAssigned.sol';\nimport './extensions/AnyNFTEthPayment.sol';\nimport './extensions/PausableNFT.sol';\nimport './extensions/withMaxCapPerAccount.sol';\n\n/// @title  AnyNFT With Eth contract\n//\n/// @author startfi team : Eman herawy\ncontract AnyNFTPausableWithEth is\n    ERC721Enumerable,\n    withMaxCapPerAccount,\n    RandomlyAssigned,\n    PausableNFT,\n    AnyNFTEthPayment\n{\n    /**************************libraries ********** */\n    using Strings for uint256;\n    /***************************Declarations go here ********** */\n    // stat var\n    uint256 public immutable mintPrice;\n    uint256 public immutable revealTime;\n\n    uint256 public startTimeSale;\n    string private _baseTokenURI;\n\n    // tokenID => timestamp\n    mapping(uint256 => uint256) private _tokenRevealTime;\n\n    // event\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(\n        // string memory _name,\n        // string memory _symbole,\n        string memory baseTokenURI_,\n        uint256 startTimeSale_,\n        uint256 mintPrice_,\n        uint256 maxSupply_,\n        uint256 maxToMintPerAddress_,\n        uint256 revealTime_,\n        uint256 reserved_,\n        address[] memory wallets_,\n        address owner_\n    )\n        // @dev : static value here to resolve (Stack too deep) issue\n        // ERC721(_name, _symbole)\n        ERC721('StartFiAnyNFT', 'SANFT')\n        withMaxCapPerAccount(maxToMintPerAddress_)\n        RandomlyAssigned(maxSupply_, 0, reserved_)\n        AnyNFTEthPayment(wallets_)\n        PausableNFT(owner_)\n    {\n        _baseTokenURI = baseTokenURI_;\n        mintPrice = mintPrice_;\n        revealTime = revealTime_;\n        startTimeSale = startTimeSale_;\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n    /// @notice this function will throw error if called before time\n    /// @return _baseTokenURI the return variables of a contractâ€™s function state variable\n    function _baseURI() internal view virtual override returns (string memory) {\n        // do we need to force reveal time here ?\n        return _baseTokenURI;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), 'ERC721URIStorage: URI query for nonexistent token');\n        require(_tokenRevealTime[tokenId] <= block.timestamp, 'ERC721URIStorage: URI query for non revealed token');\n\n        return super.tokenURI(tokenId);\n    }\n\n    /// @param owner_  address of the NFTs' owner\n    /// @return Number of NFTs owened by the `owner_`\n    function ownerNFTs(address owner_) external view returns (uint256[] memory) {\n        uint256 balance = balanceOf(owner_);\n        if (balance == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](balance);\n            for (uint256 index; index < balance; index++) {\n                result[index] = tokenOfOwnerByIndex(owner_, index);\n            }\n            return result;\n        }\n    }\n\n    /******************************************* modify state functions go here ********************************************************* */\n\n    /// @notice Only woner can call it\n    /// @dev  `_to` can't hold more than the `maxToMintPerAddress`\n    /// @dev  `_to` can't be empty\n    /// @dev  `_numberOfNFTs` can't zero\n    /// @dev must not xceed the cap\n    /// @param _to NFT holder address\n    /// @param _numberOfNFTs number of NFT to be minted\n    /// emit Transfer\n    function mintReservedNFTs(address _to, uint256 _numberOfNFTs)\n        external\n        onlyOwner\n        isValidCapPerWallet(_to)\n        isWithinReserveCapLimit(_numberOfNFTs)\n    {\n        require(_numberOfNFTs > 0, 'invalid_amount');\n        require(_to != address(0), 'invalid_address');\n        _addToTotalReserveSupply(_numberOfNFTs);\n\n        _batchMint(_to, _numberOfNFTs);\n    }\n\n    /// @notice caller should pay the required price\n    /// @dev  called only when sale is started\n    /// @dev  called only when not paused\n    /// @dev  `_numberOfNFTs` can't zero\n    /// @dev must not xceed the cap\n    /// @param _numberOfNFTs number of NFT to be minted\n    /// emit Transfer\n    function mint(uint256 _numberOfNFTs)\n        external\n        payable\n        whenNotPaused\n        isWithinCapLimit(_numberOfNFTs)\n        isValidCapPerWallet(_msgSender())\n    {\n        require(block.timestamp >= startTimeSale && startTimeSale != 0, 'Sale did not start yet');\n        require(_numberOfNFTs > 0, 'invalid_amount');\n        require(mintPrice * _numberOfNFTs <= msg.value, 'ETH value not correct');\n        _batchMint(_msgSender(), _numberOfNFTs);\n    }\n\n    function _batchMint(address to, uint256 _numberOfNFTs) private nonReentrant {\n        for (uint256 i = 0; i < _numberOfNFTs; i++) {\n            uint256 mintIndex = nextToken();\n            if (totalSupply() < maxSupply()) {\n                _tokenRevealTime[mintIndex] = block.timestamp + revealTime;\n                _safeMint(to, mintIndex);\n            }\n        }\n    }\n\n    /// @notice Only woner can call it\n    /// @dev  `_URI` can't be empty\n    /// @param _URI new base URI\n    function setBaseURI(string memory _URI) external onlyOwner {\n        require(bytes(_URI).length > 0, 'Empty base URI is not allowed');\n        _baseTokenURI = _URI;\n    }\n\n    /// @notice Only woner can call it\n    /// @dev  `__startTimeURI` must be more than the current time\n    /// @param _startTime new _startTime\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner {\n        require(_startTime > block.timestamp, 'Can not set time back');\n        startTimeSale = _startTime;\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for `wallets`\n     *\n     */\n    function withdraw() external onlyOwner {\n        _withdraw();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/extensions/RandomlyAssigned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport './WithLimitedSupplyAndReserves.sol';\n\n/// @author 1001.digital | edit: Eman Herawy\n/// @title Randomly assign tokenIDs from a given set of tokens.\nabstract contract RandomlyAssigned is WithLimitedSupplyAndReserves {\n    // Used for random index assignment\n    mapping(uint256 => uint256) private tokenMatrix;\n\n    // The initial token ID\n    uint256 private immutable startFrom;\n\n    /// Instanciate the contract\n    /// @param _maxSupply how many tokens this collection should hold\n    /// @param _startFrom the tokenID with which to start counting\n    constructor(\n        uint256 _maxSupply,\n        uint256 _startFrom,\n        uint256 reserved_\n    ) WithLimitedSupplyAndReserves(_maxSupply, reserved_) {\n        startFrom = _startFrom;\n    }\n\n    /// Get the next token ID\n    /// @dev Randomly gets a new token ID and keeps track of the ones that are still available.\n    /// @return the next token ID\n    function nextToken() internal override ensureAvailability returns (uint256) {\n        uint256 maxIndex = maxSupply() - tokenCount();\n        uint256 random = uint256(\n            keccak256(abi.encodePacked(msg.sender, block.coinbase, block.difficulty, block.gaslimit, block.timestamp))\n        ) % maxIndex;\n\n        uint256 value = 0;\n        if (tokenMatrix[random] == 0) {\n            // If this matrix position is empty, set the value to the generated random number.\n            value = random;\n        } else {\n            // Otherwise, use the previously stored number from the matrix.\n            value = tokenMatrix[random];\n        }\n\n        // If the last available tokenID is still unused...\n        if (tokenMatrix[maxIndex - 1] == 0) {\n            // ...store that ID in the current matrix position.\n            tokenMatrix[random] = maxIndex - 1;\n        } else {\n            // ...otherwise copy over the stored number to the current matrix position.\n            tokenMatrix[random] = tokenMatrix[maxIndex - 1];\n        }\n\n        // Increment counts\n        super.nextToken();\n\n        return value + startFrom;\n    }\n}\n"
    },
    "contracts/extensions/AnyNFTEthPayment.sol": {
      "content": "pragma solidity 0.8.7;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\n\n/// @title  AnyNFTEthPayment contract\n//\n/// @author startfi team : Eman herawy\ncontract AnyNFTEthPayment is ReentrancyGuard {\n    /**************************libraries ********** */\n    using Address for address payable;\n    /***************************Declarations go here ********** */\n    // stat var\n\n    address[] private _wallets;\n\n    // event\n    event Withdrawn(address payee, uint256 amount);\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(address[] memory wallets_) {\n        _wallets = wallets_;\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /******************************************* modify state functions go here ********************************************************* */\n\n    function getWallets() external view returns (address[] memory) {\n        return _wallets;\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a wallet 1 and wallet 2, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     */\n    function _withdraw() internal virtual nonReentrant {\n        uint256 share = address(this).balance / _wallets.length;\n        require(share > 0, \"Can't split zero shares\");\n        for (uint256 index = 0; index < _wallets.length; index++) {\n            emit Withdrawn(_wallets[index], share);\n            payable(_wallets[index]).sendValue(share);\n        }\n    }\n}\n"
    },
    "contracts/extensions/PausableNFT.sol": {
      "content": "pragma solidity 0.8.7;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol';\n\n/// @title  AnyNFT With Eth contract\n//\n/// @author startfi team : Eman herawy\nabstract contract PausableNFT is ERC721Pausable, Ownable {\n    /**************************libraries ********** */\n\n    /***************************Declarations go here ********** */\n    // stat var\n\n    // tokenID => timestamp\n\n    // event\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(address owner_) {\n        transferOwnership(owner_);\n    }\n\n    /******************************************* modify state functions go here ********************************************************* */\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() external virtual onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() external virtual onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/extensions/withMaxCapPerAccount.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport '@openzeppelin/contracts/interfaces/IERC721.sol';\n\n\n/// @title withMaxCapPerAccount contract that manages the max amount of nft per each wallet.\nabstract contract withMaxCapPerAccount {\n    uint256 private immutable _maxToMintPerAddress;\n\n    // post modifier\n    modifier isValidCapPerWallet(address _wallet) virtual {\n        _;\n        uint256 balance = IERC721(address(this)).balanceOf(_wallet);\n        require(balance <= maxToMintPerAddress(), 'You requested too many NFTs');\n    }\n\n    /// Instanciate the contract\n    /// @param maxToMintPerAddress_ Max amount of NFT per account\n    constructor(uint256 maxToMintPerAddress_) {\n        _maxToMintPerAddress = maxToMintPerAddress_;\n    }\n\n    /// @return the  max token amount per account\n    function maxToMintPerAddress() public view returns (uint256) {\n        return _maxToMintPerAddress;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/extensions/WithLimitedSupplyAndReserves.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport './WithLimitedSupply.sol';\n\n/// @author 1001.digital - edit mhjey - edit: Eman Herawy\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\nabstract contract WithLimitedSupplyAndReserves is WithLimitedSupply {\n    uint256 internal _totalReserveSupply;\n\n    uint256 private immutable _reserved;\n\n    modifier isWithinCapLimit(uint256 _numberOfNFTs) override {\n        require((tokenCount() + _numberOfNFTs) <= (maxSupply() - _reserved), 'Purchase exceeds max supply');\n        _;\n    }\n    modifier isWithinReserveCapLimit(uint256 _numberOfNFTs) {\n        require((_totalReserveSupply + _numberOfNFTs) <= _reserved, 'Exceeds max reserved allowed');\n        _;\n    }\n\n    /// Instanciate the contract\n    /// @param totalSupply_ how many tokens this collection should hold\n    /// @param reserved_ how many tokens this collection should reserved by the team\n    constructor(uint256 totalSupply_, uint256 reserved_) WithLimitedSupply(totalSupply_) {\n        _reserved = reserved_;\n    }\n\n    /// @dev Get reserved amount\n    /// @return the token amount reserved\n    function reserved() external view returns (uint256) {\n        return _reserved;\n    }\n\n    function totalReserveSupply() external view returns (uint256) {\n        return _totalReserveSupply;\n    }\n\n    /// @dev Check whether tokens are still available for sale\n    /// @return the available token count\n    function availableTokenForSale() external view returns (uint256) {\n        return (maxSupply() - _reserved) - (tokenCount() - _totalReserveSupply);\n    }\n\n    function _addToTotalReserveSupply(uint256 _numberOfNFTs) internal {\n        _totalReserveSupply += _numberOfNFTs;\n    }\n}\n"
    },
    "contracts/extensions/WithLimitedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport '@openzeppelin/contracts/utils/Counters.sol';\n\n/// @author 1001.digital - edit mhjey - edit: Eman Herawy\n/// @title A token tracker that limits the token supply and increments token IDs on each new mint.\nabstract contract WithLimitedSupply {\n    using Counters for Counters.Counter;\n\n    // Keeps track of how many we have minted\n    Counters.Counter private _tokenCount;\n\n    /// @dev The maximum count of tokens this token tracker will hold.\n    uint256 private immutable _maxSupply;\n\n    modifier isWithinCapLimit(uint256 _numberOfNFTs) virtual {\n        require((tokenCount() + _numberOfNFTs) <= _maxSupply, 'Purchase exceeds max supply');\n        _;\n    }\n\n    /// Instanciate the contract\n    /// @param totalSupply_ how many tokens this collection should hold\n    constructor(uint256 totalSupply_) {\n        _maxSupply = totalSupply_;\n    }\n\n    /// @dev Get the max Supply\n    /// @return the maximum token count\n    function maxSupply() public view returns (uint256) {\n        return _maxSupply;\n    }\n\n    /// @dev Get the current token count\n    /// @return the created token count\n    function tokenCount() public view returns (uint256) {\n        return _tokenCount.current();\n    }\n\n    /// @dev Check whether tokens are still available\n    /// @return the available token count\n    function availableTokenCount() public view returns (uint256) {\n        return maxSupply() - tokenCount();\n    }\n\n    /// @dev Increment the token count and fetch the latest count\n    /// @return the next token id\n    function nextToken() internal virtual ensureAvailability returns (uint256) {\n        uint256 token = _tokenCount.current();\n\n        _tokenCount.increment();\n\n        return token;\n    }\n\n    /// @dev Check whether another token is still available\n    modifier ensureAvailability() {\n        require(availableTokenCount() > 0, 'No more tokens available');\n        _;\n    }\n\n    /// @param amount Check whether number of tokens are still available\n    /// @dev Check whether tokens are still available\n    modifier ensureAvailabilityFor(uint256 amount) {\n        require(availableTokenCount() >= amount, 'Requested number of tokens not available');\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"
    },
    "contracts/extensions/WithCapForPrivilegedHolders.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\nimport './withMaxCapPerAccount.sol';\n\n\n/// @title WithPrivilegedHolders contract that give increase  the max amount of nft per each wallet for any stfi holder.\nabstract contract WithCapForPrivilegedHolders is withMaxCapPerAccount {\n    IERC20 private immutable _stfi;\n    uint256 private immutable _requiredSTFIAmount;\n    uint256 private immutable _bonus;\n\n    // post modifier\n    modifier isValidCapPerWallet(address _wallet) override {\n        _;\n        uint256 balance = IERC721(address(this)).balanceOf(_wallet);\n        require(balance <= maxToMintPerAddress(_wallet), 'You requested too many NFTs');\n    }\n\n    /// Instanciate the contract\n    /// @param maxToMintPerAddress_ Max amount of NFT per account\n    constructor(\n        uint256 maxToMintPerAddress_,\n        uint256 requiredSTFIAmount_,\n        uint256 bonus_,\n        address stfi_\n    ) withMaxCapPerAccount(maxToMintPerAddress_) {\n        _requiredSTFIAmount = requiredSTFIAmount_;\n        _bonus = bonus_;\n        _stfi = IERC20(stfi_);\n    }\n\n    /// @param account wallet address\n    /// @return _maxToMintPerAddress the  max token amount per given account\n    function maxToMintPerAddress(address account) public view returns (uint256 _maxToMintPerAddress) {\n        _maxToMintPerAddress = maxToMintPerAddress();\n        if (_stfi.balanceOf(account) >= _requiredSTFIAmount) {\n            _maxToMintPerAddress += _bonus;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/extensions/AnyNFTSTFIPayment.sol": {
      "content": "pragma solidity 0.8.7;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/interfaces/IERC20.sol';\n\n/// @title  AnyNFTSTFIPayment contract\n//\n/// @author startfi team : Eman herawy\ncontract AnyNFTSTFIPayment is ReentrancyGuard {\n    /**************************libraries ********** */\n\n    /***************************Declarations go here ********** */\n    // stat var\n    IERC20 private immutable _stfi;\n    address[] private _wallets;\n\n    // event\n    event Withdrawn(address payee, uint256 amount);\n\n    // modifier\n\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(address[] memory wallets_, address stfi_) {\n        _wallets = wallets_;\n        _stfi = IERC20(stfi_);\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n\n    /******************************************* modify state functions go here ********************************************************* */\n    function _getAllowance(address owner) internal view returns (uint256) {\n        return _stfi.allowance(owner, address(this));\n    }\n\n    function getWallets() external view returns (address[] memory) {\n        return _wallets;\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for a wallet 1 and wallet 2, forwarding all gas to the\n     * recipient.\n     *\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n     * Make sure you trust the recipient, or are either following the\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n     *\n     */\n    function _withdraw() internal virtual nonReentrant {\n        uint256 share = _stfi.balanceOf(address(this)) / _wallets.length;\n        require(share > 0, \"Can't split zero shares\");\n        for (uint256 index = 0; index < _wallets.length; index++) {\n            emit Withdrawn(_wallets[index], share);\n\n            require(_stfi.transfer(_wallets[index], share), \"Couldn't transfer STFI\");\n        }\n    }\n}\n"
    },
    "contracts/launchpadProjects/EightBall.sol": {
      "content": "pragma solidity 0.8.7;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '../extensions/RandomlyAssigned.sol';\nimport '../extensions/AnyNFTEthPayment.sol';\nimport '../extensions/PausableNFT.sol';\n\n/// @title  EightBall With Eth contract\n//\n/// @author startfi team : Eman herawy\ncontract EightBall is ERC721Enumerable, RandomlyAssigned, PausableNFT, AnyNFTEthPayment {\n    /**************************libraries ********** */\n    using Strings for uint256;\n    /***************************Declarations go here ********** */\n    // stat var\n    uint256 public immutable mintPrice;\n    uint256 public immutable revealTime;\n\n    uint256 public startTimeSale;\n    string private _baseTokenURI;\n\n    // tokenID => timestamp\n    mapping(uint256 => uint256) private _tokenRevealTime;\n\n    // event\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(\n        // string memory _name,\n        // string memory _symbole,\n        string memory baseTokenURI_,\n        // uint256 startTimeSale_,\n        uint256 mintPrice_,\n        uint256 maxSupply_,\n        uint256 revealTime_,\n        uint256 reserved_,\n        address[] memory wallets_,\n        address owner_\n    )\n        // @dev : static value here to resolve (Stack too deep) issue\n        // ERC721(_name, _symbole)\n        ERC721('EightBall', '8B')\n        RandomlyAssigned(maxSupply_, 0, reserved_)\n        AnyNFTEthPayment(wallets_)\n        PausableNFT(owner_)\n    {\n        _baseTokenURI = baseTokenURI_;\n        mintPrice = mintPrice_;\n        revealTime = revealTime_;\n        ///  startTimeSale = startTimeSale_;\n    }\n\n    /******************************************* read state functions go here ********************************************************* */\n    /// @notice this function will throw error if called before time\n    /// @return _baseTokenURI the return variables of a contractâ€™s function state variable\n    function _baseURI() internal view virtual override returns (string memory) {\n        // do we need to force reveal time here ?\n        return _baseTokenURI;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), 'ERC721URIStorage: URI query for nonexistent token');\n        require(_tokenRevealTime[tokenId] <= block.timestamp, 'ERC721URIStorage: URI query for non revealed token');\n\n        return super.tokenURI(tokenId);\n    }\n\n    /// @param owner_  address of the NFTs' owner\n    /// @return Number of NFTs owened by the `owner_`\n    function ownerNFTs(address owner_) external view returns (uint256[] memory) {\n        uint256 balance = balanceOf(owner_);\n        if (balance == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](balance);\n            for (uint256 index; index < balance; index++) {\n                result[index] = tokenOfOwnerByIndex(owner_, index);\n            }\n            return result;\n        }\n    }\n\n    /******************************************* modify state functions go here ********************************************************* */\n\n    /// @notice Only woner can call it\n    /// @dev  `_to` can't hold more than the `maxToMintPerAddress`\n    /// @dev  `_to` can't be empty\n    /// @dev  `_numberOfNFTs` can't zero\n    /// @dev must not xceed the cap\n    /// @param _to NFT holder address\n    /// @param _numberOfNFTs number of NFT to be minted\n    /// emit Transfer\n    function mintReservedNFTs(address _to, uint256 _numberOfNFTs)\n        external\n        onlyOwner\n        isWithinReserveCapLimit(_numberOfNFTs)\n    {\n        require(_numberOfNFTs > 0, 'invalid_amount');\n        require(_to != address(0), 'invalid_address');\n        _addToTotalReserveSupply(_numberOfNFTs);\n\n        _batchMint(_to, _numberOfNFTs);\n    }\n\n    /// @notice caller should pay the required price\n    /// @dev  called only when sale is started\n    /// @dev  called only when not paused\n    /// @dev  `_numberOfNFTs` can't zero\n    /// @dev must not xceed the cap\n    /// @param _numberOfNFTs number of NFT to be minted\n    /// emit Transfer\n    function mint(uint256 _numberOfNFTs) external payable whenNotPaused {\n        require(block.timestamp >= startTimeSale && startTimeSale != 0, 'Sale did not start yet');\n        require(_numberOfNFTs > 0, 'invalid_amount');\n        require(mintPrice * _numberOfNFTs <= msg.value, 'ETH value not correct');\n        _batchMint(_msgSender(), _numberOfNFTs);\n    }\n\n    function _batchMint(address to, uint256 _numberOfNFTs) private nonReentrant {\n        for (uint256 i = 0; i < _numberOfNFTs; i++) {\n            uint256 mintIndex = nextToken();\n            if (totalSupply() < maxSupply()) {\n                _tokenRevealTime[mintIndex] = block.timestamp + revealTime;\n                _safeMint(to, mintIndex);\n            }\n        }\n    }\n\n    /// @notice Only woner can call it\n    /// @dev  `_URI` can't be empty\n    /// @param _URI new base URI\n    function setBaseURI(string memory _URI) external onlyOwner {\n        require(bytes(_URI).length > 0, 'Empty base URI is not allowed');\n        _baseTokenURI = _URI;\n    }\n\n    /// @notice Only woner can call it\n    /// @dev  `__startTimeURI` must be more than the current time\n    /// @param _startTime new _startTime\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner {\n        require(_startTime > block.timestamp, 'Can not set time back');\n        startTimeSale = _startTime;\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for `wallets`\n     *\n     */\n    function withdraw() external onlyOwner {\n        _withdraw();\n    }\n}\n"
    },
    "contracts/AnyNFTPausableWithSTFI.sol": {
      "content": "pragma solidity 0.8.7;\n\n//SPDX-License-Identifier: AGPL-3.0-only\n/*\n        ,                                                                       \n  %%%%%%%%%%%%%%                                                      %%%%%%%   \n %%%           ./    %%                                %%%          %%%       %%\n%%%   ,,,,,,         %%,,,,,,.    ,,,      ,    ,,,,   %%%,,,,,,   %%%%%%%%%*   \n %%%       ,,,,,     %%       %%%%%%%%%%   %%%%%%%/    %%%      %%%%%%%%%#    %%\n  %%%%%*      ,,,    %%      %%%       %%  %%%         %%%         (%%        %%\n      ,%%%%%   ,,,   %%%     %%%       %%  %%%         %%%         (%%        %%\n  ,           ,,,     %%%%%%  .%%%%%%% %%  %%%          #%%%%%(    (%%        %%\n  ,,,,,,,,,,,,,,                                                                */\n\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport './extensions/RandomlyAssigned.sol';\nimport './extensions/AnyNFTSTFIPayment.sol';\nimport './extensions/PausableNFT.sol';\nimport './extensions/WithCapForPrivilegedHolders.sol';\n\n/// @title  AnyNFT With Eth contract\n//\n/// @author startfi team : Eman herawy\ncontract AnyNFTPausableWithSTFI is\n    ERC721Enumerable,\n    WithCapForPrivilegedHolders,\n    RandomlyAssigned,\n    PausableNFT,\n    AnyNFTSTFIPayment\n{\n    /**************************libraries ********** */\n    using Strings for uint256;\n    /***************************Declarations go here ********** */\n    // stat var\n    uint256 public mintPrice;\n    uint256 public revealTime;\n\n    uint256 public startTimeSale;\n    string private _baseTokenURI;\n    bool private isInit;\n    // tokenID => timestamp\n    mapping(uint256 => uint256) private _tokenRevealTime;\n\n    // event\n\n    // modifier\n    /******************************************* constructor goes here ********************************************************* */\n    constructor(\n        // string memory _name,\n        // string memory _symbole,\n        uint256 maxSupply_,\n        uint256 maxToMintPerAddress_,\n        uint256 requiredSTFIAmount_,\n        uint256 bonus_,\n        uint256 reserved_,\n        address[] memory wallets_,\n        address stfi_,\n        address owner_\n    )\n        // @dev : static value here to resolve (Stack too deep) issue\n        // ERC721(_name, _symbole)\n        ERC721('StartFiAnyNFT', 'SANFT')\n        WithCapForPrivilegedHolders(maxToMintPerAddress_, requiredSTFIAmount_, bonus_, stfi_)\n        RandomlyAssigned(maxSupply_, 0, reserved_)\n        AnyNFTSTFIPayment(wallets_, stfi_)\n        PausableNFT(owner_)\n    {}\n\n    /******************************************* read state functions go here ********************************************************* */\n    /// @notice this function will throw error if called before time\n    /// @return _baseTokenURI the return variables of a contractâ€™s function state variable\n    function _baseURI() internal view virtual override returns (string memory) {\n        // do we need to force reveal time here ?\n        return _baseTokenURI;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), 'ERC721URIStorage: URI query for nonexistent token');\n        require(_tokenRevealTime[tokenId] <= block.timestamp, 'ERC721URIStorage: URI query for non revealed token');\n\n        return super.tokenURI(tokenId);\n    }\n\n    /// @param owner_  address of the NFTs' owner\n    /// @return Number of NFTs owened by the `owner_`\n    function ownerNFTs(address owner_) external view returns (uint256[] memory) {\n        uint256 balance = balanceOf(owner_);\n        if (balance == 0) {\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](balance);\n            for (uint256 index; index < balance; index++) {\n                result[index] = tokenOfOwnerByIndex(owner_, index);\n            }\n            return result;\n        }\n    }\n\n    /******************************************* modify state functions go here ********************************************************* */\n\n    /// @notice Only woner can call it\n    /// @dev  `_to` can't hold more than the `maxToMintPerAddress`\n    /// @dev  `_to` can't be empty\n    /// @dev  `_numberOfNFTs` can't zero\n    /// @dev must not xceed the cap\n    /// @param _to NFT holder address\n    /// @param _numberOfNFTs number of NFT to be minted\n    /// emit Transfer\n    function mintReservedNFTs(address _to, uint256 _numberOfNFTs)\n        external\n        onlyOwner\n        isValidCapPerWallet(_to)\n        isWithinReserveCapLimit(_numberOfNFTs)\n    {\n        require(_numberOfNFTs > 0, 'invalid_amount');\n        require(_to != address(0), 'invalid_address');\n        _addToTotalReserveSupply(_numberOfNFTs);\n\n        _batchMint(_to, _numberOfNFTs);\n    }\n\n    /// @notice caller should pay the required price\n    /// @dev  called only when sale is started\n    /// @dev  called only when not paused\n    /// @dev  `_numberOfNFTs` can't zero\n    /// @dev must not xceed the cap\n    /// @param _numberOfNFTs number of NFT to be minted\n    /// emit Transfer\n    function mint(uint256 _numberOfNFTs)\n        external\n        whenNotPaused\n        isWithinCapLimit(_numberOfNFTs)\n        isValidCapPerWallet(_msgSender())\n    {\n        require(block.timestamp >= startTimeSale && startTimeSale != 0, 'Sale did not start yet');\n        require(_numberOfNFTs > 0, 'invalid_amount');\n\n        require(mintPrice * _numberOfNFTs <= _getAllowance(_msgSender()), 'Price value  is not correct');\n        _batchMint(_msgSender(), _numberOfNFTs);\n    }\n\n    function _batchMint(address to, uint256 _numberOfNFTs) private nonReentrant {\n        for (uint256 i = 0; i < _numberOfNFTs; i++) {\n            uint256 mintIndex = nextToken();\n            if (totalSupply() < maxSupply()) {\n                _tokenRevealTime[mintIndex] = block.timestamp + revealTime;\n                _safeMint(to, mintIndex);\n            }\n        }\n    }\n\n    /// @notice Only woner can call it\n    /// @dev  `_URI` can't be empty\n    /// @param _URI new base URI\n    function setBaseURI(string memory _URI) external onlyOwner {\n        require(bytes(_URI).length > 0, 'Empty base URI is not allowed');\n        _baseTokenURI = _URI;\n    }\n\n    /// @notice Only woner can call it\n    /// @dev  `__startTimeURI` must be more than the current time\n    /// @param _startTime new _startTime\n    function updateSaleStartTime(uint256 _startTime) external onlyOwner {\n        require(_startTime > block.timestamp, 'Can not set time back');\n        startTimeSale = _startTime;\n    }\n\n    /**\n     * @dev Withdraw accumulated balance for `wallets`\n     *\n     */\n    function withdraw() external onlyOwner {\n        _withdraw();\n    }\n\n    /// @notice should be follow the eip 1014 TODO\n    function init(\n        string memory baseTokenURI_,\n        uint256 startTimeSale_,\n        uint256 mintPrice_,\n        uint256 revealTime_\n    ) external onlyOwner {\n        require(isInit, 'already initialized');\n        _baseTokenURI = baseTokenURI_;\n        mintPrice = mintPrice_;\n        revealTime = revealTime_;\n        startTimeSale = startTimeSale_;\n        isInit = true;\n    }\n}\n"
    },
    "contracts/library/StartFiRoyalityLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.7;\nimport '../interface/IERC721Royalty.sol';\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\n\nlibrary StartFiRoyalityLib {\n    bytes4 constant RORALTY_INTERFACE = 0x2a55205a;\n\n    /**\n     *@notice  only if this contract has royaltyInfo function\n     *@dev  call the royaltyInfo function in nft contract\n     *@param _NFTContract NFT contract address\n     *@param _tokenId token id\n     *@param _value  token price\n     *@return issuer original issuer address\n     *@return royaltyAmount  the issuer total amount of tokens that he should recieve based on his share\n     */\n    function _getRoyaltyInfo(\n        address _NFTContract,\n        uint256 _tokenId,\n        uint256 _value\n    ) internal view returns (address issuer, uint256 royaltyAmount) {\n        (issuer, royaltyAmount) = IERC721Royalty(_NFTContract).royaltyInfo(_tokenId, _value);\n    }\n\n    /**\n     *\n     * @dev  interal function to check if any gevin contract has supportsInterface See {IERC165-supportsInterface}.\n     * @param _NFTContract NFT contract address\n     * @return true if this NFT contract support royalty, false if not\n     */\n    function _supportRoyalty(address _NFTContract) internal view returns (bool) {\n        try IERC165(_NFTContract).supportsInterface(RORALTY_INTERFACE) returns (bool isRoyaltySupported) {\n            return isRoyaltySupported;\n        } catch {\n            return false;\n        }\n    }\n}\n"
    },
    "contracts/interface/IERC721Royalty.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\ninterface IERC721Royalty {\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\n        external\n        view\n        returns (address issuer, uint256 royaltyAmount);\n}\n"
    },
    "contracts/extensions/ERC721Royalty.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.7;\nimport '../interface/IERC721Royalty.sol';\nimport '../library/StartFiFinanceLib.sol';\n\n/**\n * @author Eman Herawy, StartFi Team\n *@title  ERC721 Royalty\n * [ desc ] : erc721 with reoylaty support interface\n */\ncontract ERC721Royalty is IERC721Royalty {\n    mapping(uint256 => address) internal tokenIdToIssuer;\n    mapping(uint256 => mapping(address => Base)) internal _issuerPercentage;\n\n    // 3.5 is 35 share and 10 separator\n    struct Base {\n        uint8 share;\n        uint8 shareSeparator;\n    }\n\n    /**\n     *\n     * @dev  set roylaity info\n     * @param _tokenId: serized json object that has the following data ( category, name , desc , tages, ipfs hash)\n     * @param issuer: NFt original issuer\n     * @param share: eg. 25\n     * @param separator: eg. 10\n     *\n     */\n    function _supportRoyalty(\n        uint256 _tokenId,\n        address issuer,\n        uint8 share,\n        uint8 separator\n    ) internal {\n        require(share > 0 && separator > 0, 'separator and Share values must be more than zero');\n        tokenIdToIssuer[_tokenId] = issuer;\n        _issuerPercentage[_tokenId][issuer] = Base(share, separator);\n    }\n\n    /**\n     \n    * @dev  the formula is as follow : if issuer share is 2.5 then the share is 25 and the separator is 10 \n    * so inorder to calc the amount of royalty share for a token , formula should be totoal (price * share)/(separator*100)\n    * @param _tokenId : token id\n    * @param _value : token price on marketplace \n    * @return issuer : original issuer of the given token and his/her share of this this token\n     */\n    function royaltyInfo(uint256 _tokenId, uint256 _value)\n        external\n        view\n        override\n        returns (address issuer, uint256 royaltyAmount)\n    {\n        issuer = tokenIdToIssuer[_tokenId];\n        if (issuer != address(0)) {\n            Base memory _base = _issuerPercentage[_tokenId][issuer];\n            royaltyAmount = StartFiFinanceLib._calcFees(_value, uint256(_base.share), uint256(_base.shareSeparator));\n        }\n    }\n\n    // 0x2a55205a\n    // 0x2a55205a\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsRoyalty() public pure returns (bytes4 interfaceId) {\n        return type(IERC721Royalty).interfaceId;\n    }\n}\n"
    },
    "contracts/library/StartFiFinanceLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.7;\nimport './StartFiRoyalityLib.sol';\n\nimport './SafeDecimalMath.sol';\n\nlibrary StartFiFinanceLib {\n    using SafeDecimalMath for uint256;\n\n    function _calcSum(uint256 a, uint256 b) internal pure returns (uint256 result) {\n        result = a + b;\n    }\n\n    /**\n     @dev calculat the platform fees\n    *@param price  : item  price\n    *@return fees the value that the platform will get\n     */\n    function _calcFees(\n        uint256 price,\n        uint256 _fee,\n        uint256 _feeBase\n    ) internal pure returns (uint256 fees) {\n        // round decimal to the nearst value\n        fees = price.multiplyDecimalRound((_fee.divideDecimal(_feeBase * 100)));\n    }\n\n    /**\n      @dev calculat the platform share when seller call disput\n    *@param insurancAmount  : seller defind value to be staked in order to participate in a gevin auction\n    * @return fineAmount the value that the platform will get\n    * @return remaining the value that the auction woner will get\n     */\n    function _calcBidDisputeFees(uint256 insurancAmount) internal pure returns (uint256 fineAmount, uint256 remaining) {\n        fineAmount = insurancAmount.divideDecimalRound(2 ether); // divided by 2 * 18 decimal\n\n        remaining = insurancAmount - fineAmount;\n    }\n\n    function _calcShare(uint256 numerator, uint256 donomirator) internal pure returns (uint256 share) {\n        share = numerator.divideDecimalRound(donomirator);\n    }\n\n    /**\n     *@dev  call the royaltyInfo function in nft contract\n     *@param _NFTContract NFT contract address\n     *@param tokenId token id\n     *@param _value  token price\n     *@param _fee plateform fee Fraction.  the formula is (fees * 1000)/base\n     *@param _feeBase plateform fee base\n     *@return issuer original issuer address\n     *@return royaltyAmount  the issuer total amount of tokens that he should recieve based on his share\n     *@return fees  plateform fees\n     *@return netPrice  amount that the seller will get after deducing the roylaity share and platform fees\n     */\n\n    function _getListingFinancialInfo(\n        address _NFTContract,\n        uint256 tokenId,\n        uint256 _value,\n        uint256 _fee,\n        uint256 _feeBase\n    )\n        internal\n        view\n        returns (\n            address issuer,\n            uint256 royaltyAmount,\n            uint256 fees,\n            uint256 netPrice\n        )\n    {\n        fees = _calcFees(_value, _fee, _feeBase);\n        netPrice = _value - fees;\n        // royalty check\n        if (StartFiRoyalityLib._supportRoyalty(_NFTContract)) {\n            (issuer, royaltyAmount) = StartFiRoyalityLib._getRoyaltyInfo(_NFTContract, tokenId, _value);\n            if (royaltyAmount > 0 && issuer != address(0)) {\n                netPrice = netPrice - royaltyAmount;\n            }\n        }\n    }\n\n    // function getUSDPriceInSTFI(uint256 _usdCap, uint256 _stfiCap) internal pure returns (uint256 usdPrice) {\n    //     require(_usdCap > 0 && _stfiCap > 0, 'StartFiFinanceLib: cap must be more than zero');\n    //     // TODO: need to manage when 1 STFI is more than 1 USD ( dicimal issue in solidity)\n    //     usdPrice = _stfiCap.wadDiv(_usdCap);\n    // }\n}\n"
    },
    "contracts/library/SafeDecimalMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity 0.8.7;\n\n// Libraries\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SafeDecimalMath {\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint256 public constant UNIT = 10**uint256(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint256(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint256) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return (x * y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint256 x,\n        uint256 y,\n        uint256 precisionUnit\n    ) private pure returns (uint256) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint256 quotientTimesTen = (x * y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return ((x * UNIT) / y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint256 x,\n        uint256 y,\n        uint256 precisionUnit\n    ) private pure returns (uint256) {\n        uint256 resultTimesTen = ((x * (precisionUnit * 10)) / y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint256 x, uint256 y) internal pure returns (uint256) {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint256 i) internal pure returns (uint256) {\n        return i * UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR;\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint256 i) internal pure returns (uint256) {\n        uint256 quotientTimesTen = i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    // Computes `a - b`, setting the value to 0 if b > a.\n    function floorsub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return b >= a ? 0 : a - b;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
